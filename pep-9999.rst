PEP: 9999
Title: Package index configuration standardization
Author: Fredrik Averpil <fredrik at averpil.com>
Status: Draft
Type: Informational
Created: 05-May-2021
Post-History: <dates of postings to python-ideas and/or python-dev>


Abstract
========

This PEP standardizes configuration of PyPI repositories.


Motivation
==========

Workflow tools come up with their own configuration mechanisms for PyPI repositories, as there is no standard for this. This causes fragmentation and pain points.

Examples of such configuration files:

* Pip's ``pip.conf`` and ``pip.ini``
* Packaging's ``.pypirc`` (also used by tools like Flit and Twine)
* Poetry's ``config.toml`` and ``auth.toml``


Rationale
=========

While this PEP aim to come up with a unified PyPI repository configuration, thought has been given so to be able to extend the configuration later. For example, PyPI repositories are assumed in this PEP, but a ``type`` attribute could be introduced which would default to ``pypi`` down the line, to allow for other package repository types. Any tool could also start taking advantage of the fact that the configuration files and their discovery is a standard, and use this for their own configuration.


Specification
=============

The specification consists of three parts: the configuration definition, package discovery and configuration file discovery.


Configuration definition
------------------------

The configuration is split into two files:

* ``config.toml`` for PyPI repository configuration
* ``auth.toml`` for credentials


The config.toml file
''''''''''''''''''''

Package index configuration is defined in the ``config.toml`` file::


    [repositories]

    [repostiories.pypi]
    url = "https://pypi.org/simple/"

    [repostiories.myrepo1]
    url = "http://myserver2.org/simple"

    [authentication]

    [authentication.pypi]
    username = "__token__"
    password = "pypi-AgEIcHlwaS5vcmcCJDJjMmI5NDJmLWIzNzQtNDc3ZC04ZmRkLTM4NDEzY2M1ZTU5MAACJXsicGVybWlzc2lvbnMiOiAidXNlciIsICJ2ZXJzaW9uIjogMX0AAAYgV91r8iEUUz7Q5xbsfi_KGiO3wrJR2_IOOpnFyLo62bk"

    [authentication.myrepo1]
    username = "foo"
    password = "YmFyCg=="


A repository has the following attributes::

    ==================  ===========  =============================================
    Attribute           Type         Description
    ==================  ===========  =============================================
    final               bool         Make it impossible to override/remove the repository configuration (default: false)
    priority            int          Order of priority, sorted descending (default: 0)
    proxy_url           str          The URL to the proxy server, can contain a port
    shadow              bool         Use package from this index, even if it was found in a previous index (default: false)
    url                 str          URL to repository, can contain a port
    ==================  ===========  =============================================


A repository's credentials has the following attributes::

    ==================  ===========  ===============================================
    Attribute           Type         Description
    ==================  ===========  ===============================================
    cert                str          Path to certificate authority bundle (*.pem)
    cert-client         str          Path to client certificate (*.pem)
    enabled             bool         Whether the repository should be used or not (default: true)
    password            str          The password for the repository
    proxy_password      str          The password for the proxy server
    proxy_username      str          The username for the proxy server
    username            str          The username for the repository
    ==================  ===========  ===============================================


Tools preferring to look up credentials from other locations, such as keyring, are advised to use the full repository URL as the key, rather than the index name or hostname.


The auth.toml file
''''''''''''''''''

Optionally, authentication can be defined in a separate ``auth.toml``. This way, credentials can be fully or partially separated from repository URLs.

Example ``auth.toml``::

    [authentication]

    [authentication.myrepo1]
    username = "foo"
    password = "YmFyCg=="


Package discovery
-----------------

PyPI
''''

The PyPI repository (``repositories.pypi``) does not have to be specified in the ``config.toml``. If not specified, it will be used as the first package index by default. However, by explicitly defining it, the repository attributes can be used and it can be prioritized differently.


Package index priority
''''''''''''''''''''''

Tools should respect priority by acting as if all lower priority repositories were not specified when a higher priority repository satisfies the task. Tools that choose not to respect priority MUST display a warning to users when a non-zero priority value is being ignored. It is acceptable for tools to be less efficient in order to handle prioritized repositories, for example, by not performing queries in parallel.


Configuration file discovery
----------------------------

The locations of the configuration files (``config.toml`` and ``auth.toml``) vary slightly across platforms. You may have per-user, per-virtualenv or global (shared amongst all users) configuration:

If multiple configuration files are found, then they are combined (merge and override) in the following order:

1. The global file is read
2. The per-user file is read
3. The virtualenv-specific file is read

Each file read overrides any values read from previous files.


Global
''''''

* Unix: ``/etc/.config/python/``
* macOS: ``/Library/Application Support/python/``
* Windows: ``%PROGRAMDATA%\Python``


Per-user
''''''''

* Unix: ``$HOME/.config/python/``
* macOS: ``$HOME/.config/python/``
* Windows: ``%APPDATA%\python\``


Per-virtualenv
''''''''''''''

* Unix: ``$VIRTUAL_ENV/.python/``
* macOS: ``$VIRTUAL_ENV/.python/``
* Windows: ``%VIRTUAL_ENV%\.python\``


Configuration file merging
''''''''''''''''''''''''''

The way the configuration files are merged is by "deep dictionary update", where the ``config.toml`` is updated with any values of the ``auth.toml`` in the same location.

To do: Python code snippet here to illustrate the exact logic.


Backwards Compatibility
=======================

[Describe potential impact and severity on pre-existing code.]


Security Implications
=====================

[How could a malicious user take advantage of this new feature?]


How to Teach This
=================

[How to teach users, new and experienced, how to apply the PEP to their work.]


Reference Implementation
========================

[Link to any existing implementation and details about its state, e.g. proof-of-concept.]


Rejected Ideas
==============

Base64 encoding for passwords
'''''''''''''''''''''''''''''

Base64 encoding for passwords were considered, to avoid "over the shoulder" peeking.
However, this complicates being able to tell the difference between a password and a token.


Order or repositories defined in toml dictates priority
'''''''''''''''''''''''''''''''''''''''''''''''''''''''

The order in which the repositories are defined in ``config.toml`` and/or ``auth.toml`` will not be used as the order of priority in which packages are to be discovered.


Open Issues
===========

[Any points that are still being decided/discussed.]


References
==========

[A collection of URLs used as references through the PEP.]


Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
