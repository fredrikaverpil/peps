PEP: 9999
Title: Specifying Package index configuration
Author: Fredrik Averpil <fredrik at averpil.com>
Status: Draft
Type: Informational
Created: 05-May-2021
Post-History: <dates of postings to python-ideas and/or python-dev>


Abstract
========

This PEP specifies how Python package index configuration should be configured independent of the client tools using them. As part of this specification, a new configuration file is introduced for client tools to use to read index specific configuration. 

We idenitfy a Package index as a service that implements the JSON API and/or Legacy API as described by the Warehouse [1]_ project (like PyPI.org [2]_) . In the future, this can be extended to support other package sources like link soruces (html).


Motivation
==========

Workflow tools come up with their own configuration mechanisms for Python package
indexes, as there is no standard for this. This causes fragmentation and
pain points.

Examples of such configuration files:

* Pip's ``pip.conf`` and ``pip.ini``
* Packaging's ``.pypirc`` (also used by tools like Flit and Twine)
* Poetry's ``config.toml`` and ``auth.toml``


Rationale
=========

While this PEP aim to come up with a unified Python package index configuration,
thought has been given so to be able to extend the configuration later. For example,
Warehouse [1]_ repositories are assumed in this PEP, but a ``type`` attribute could be
introduced which would default to e.g. ``warehouse`` down the line, to allow for other
package index types. Any tool could also start taking advantage of the fact that the
configuration files and their discovery is a standard, and use this for their own
configuration.


Specification
=============

The specification consists of three parts: the configuration definition, package discovery and configuration file discovery.


Configuration definition
------------------------

The configuration is split into two files:

* ``config.toml`` for Python package index configuration
* ``auth.toml`` for credentials


The config.toml file
''''''''''''''''''''

Package index configuration is defined in the ``config.toml`` file::

    [[package_indexes]]
    name = "pypi"
    url = "https://pypi.org/simple/"

    [[package_indexes]]
    name = "myrepo1"
    url = "http://myserver2.org/simple"


    [[credentials]]
    package_index_name = "pypi"
    username = "__token__"
    password = "pypi-AgEIcHlwaS5vcmcCJDJjMmI5NDJmLWIzNzQtNDc3ZC04ZmRkLTM4NDEzY2M1ZTU5MAACJXsicGVybWlzc2lvbnMiOiAidXNlciIsICJ2ZXJzaW9uIjogMX0AAAYgV91r8iEUUz7Q5xbsfi_KGiO3wrJR2_IOOpnFyLo62bk"

    [[credentials]]
    package_index_name = "myrepo1"
    username = "foo"
    password = "YmFyCg=="


A package index has the following attributes::

    ==================  ===========  =============================================
    Attribute           Type         Description
    ==================  ===========  =============================================
    final               bool         Make it impossible to override/remove the package index configuration (default: false)
    priority            int          Order of priority, sorted descending (default: 0)
    proxy_url           str          The URL to the proxy server, can contain a port
    url                 str          URL to repository, can contain a port
    ==================  ===========  =============================================


A package index's credentials has the following attributes::

    ==================  ===========  ===============================================
    Attribute           Type         Description
    ==================  ===========  ===============================================
    cert                str          Path to certificate authority bundle (*.pem)
    cert-client         str          Path to client certificate (*.pem)
    enabled             bool         Whether the repository should be used or not (default: true)
    package_index_name  str          The corresponding package index name, defined in ``config.toml``
    password            str          The password for the repository
    proxy_password      str          The password for the proxy server
    proxy_username      str          The username for the proxy server
    username            str          The username for the repository
    ==================  ===========  ===============================================


Tools preferring to look up credentials from other locations, such as keyring, are
advised to use the full package index URL as the key, rather than the index name or
hostname.


The auth.toml file
''''''''''''''''''

Optionally, authentication can be defined in a separate ``auth.toml``. This way,
credentials can be fully or partially separated from package index URLs.

Example ``auth.toml``::

    [[credentials]]
    package_index_name = "myrepo1"
    username = "foo"
    password = "YmFyCg=="


Package discovery
-----------------

PyPI.org
''''''''

The PyPI.org repository (``repositories.pypi``) does not have to be specified in the
``config.toml``. If not specified, it will be used as the first package index by
default. However, by explicitly defining it, the repository attributes can be used and
it can be prioritized differently.


Package index priority
''''''''''''''''''''''

Tools should respect priority by acting as if all lower priority package index were not
specified when a higher priority package index satisfies the task. Tools that choose not
to respect priority MUST display a warning to users when a non-zero priority value is
being ignored. It is acceptable for tools to be less efficient in order to handle
prioritized package indexes, for example, by not performing queries in parallel.


Configuration file discovery
----------------------------

The locations of the configuration files (``config.toml`` and ``auth.toml``) vary slightly across platforms. You may have global, per-user and per-environment configuration:

If multiple configuration files are found, then they are merged in the following order:

1. The global files are read
2. The per-user files are read
3. The per-environment files are read


Global
''''''

* Unix: ``/etc/.config/python/``
* macOS: ``/Library/Application Support/python/``
* Windows: ``%PROGRAMDATA%\Python``


Per-user
''''''''

* Unix: ``$HOME/.config/python/``
* macOS: ``$HOME/.config/python/``
* Windows: ``%APPDATA%\Python\`` (note, this is Roaming app data, not Local)


Per-environment
'''''''''''''''

* Unix: ``sys.prefix``
* macOS: ``sys.prefix``
* Windows: ``sys.prefix``


Configuration file merging strategy
'''''''''''''''''''''''''''''''''''

The way the configuration files are merged is by "deep dictionary update", where the ``config.toml`` is updated with any values of the ``auth.toml`` in the particular location. In short, the keys and values are accumulated, where ``auth.toml`` takes precedence in the case of duplicate keys for the given location.

There is no way to _remove_ data from the configuration which has once been defined.
However, package indexes can be disabled using the ``enable`` attribute.

To do: Python code snippet here to illustrate the exact logic.


Backwards Compatibility
=======================

[Describe potential impact and severity on pre-existing code.]


Security Implications
=====================

[How could a malicious user take advantage of this new feature?]


How to Teach This
=================

[How to teach users, new and experienced, how to apply the PEP to their work.]


Reference Implementation
========================

[Link to any existing implementation and details about its state, e.g. proof-of-concept.]


Rejected Ideas
==============

Base64 encoding for passwords
'''''''''''''''''''''''''''''

Base64 encoding for passwords were considered, to avoid "over the shoulder" peeking.
However, this complicates being able to tell the difference between a password and a token.


Package index definition order dictates priority order
''''''''''''''''''''''''''''''''''''''''''''''''''''''

The order in which the package indexes are defined in ``config.toml`` and/or
``auth.toml`` will not be used as the order of priority in which packages are to be
discovered.


Shadowing can imply "fallback" and the behaviour is not deterministic. This can potentially make it harder to reason about runtime behaviour. In cases where PEP-610 [3]_ and/or lock files are used, the non-deterministic bhaviour can cause conflicts with downstream tool's intended behaviour.


Read configuration files per-virtualenv
'''''''''''''''''''''''''''''''''''''''

Originally, it was proposed that configuration files were discovered per-virtualenv, but `sys.prefix` was deemed more flexible, as it also works for activated virtual environments:

* Unix: ``$VIRTUAL_ENV/.python/``
* macOS: ``$VIRTUAL_ENV/.python/``
* Windows: ``%VIRTUAL_ENV%\.python\``


Open Issues
===========

[Any points that are still being decided/discussed.]


References
==========

.. [1] Warehouse `<https://github.com/pypa/warehouse>`_
.. [2] PyPI.org `<https://pypi.org>`_
.. [3] PEP-610 `<https://www.python.org/dev/peps/pep-0610/>`_


Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.



..
   Local Variables:
   mode: indented-text
   indent-tabs-mode: nil
   sentence-end-double-space: t
   fill-column: 70
   coding: utf-8
   End:
